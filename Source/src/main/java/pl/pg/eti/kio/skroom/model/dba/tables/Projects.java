/**
 * This class is generated by jOOQ
 */
package pl.pg.eti.kio.skroom.model.dba.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import pl.pg.eti.kio.skroom.model.dba.DefaultSchema;
import pl.pg.eti.kio.skroom.model.dba.Keys;
import pl.pg.eti.kio.skroom.model.dba.tables.records.ProjectsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Projects extends TableImpl<ProjectsRecord> {

    private static final long serialVersionUID = -1522031795;

    /**
     * The reference instance of <code>PROJECTS</code>
     */
    public static final Projects PROJECTS = new Projects();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectsRecord> getRecordType() {
        return ProjectsRecord.class;
    }

    /**
     * The column <code>PROJECTS.ID</code>.
     */
    public final TableField<ProjectsRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>PROJECTS.NAME</code>.
     */
    public final TableField<ProjectsRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>PROJECTS.DESCRIPTION</code>.
     */
    public final TableField<ProjectsRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>PROJECTS.DEFAULT_SPRINT_LENGTH</code>.
     */
    public final TableField<ProjectsRecord, Integer> DEFAULT_SPRINT_LENGTH = createField("DEFAULT_SPRINT_LENGTH", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>PROJECTS</code> table reference
     */
    public Projects() {
        this("PROJECTS", null);
    }

    /**
     * Create an aliased <code>PROJECTS</code> table reference
     */
    public Projects(String alias) {
        this(alias, PROJECTS);
    }

    private Projects(String alias, Table<ProjectsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Projects(String alias, Table<ProjectsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProjectsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROJECTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProjectsRecord> getPrimaryKey() {
        return Keys.PK_PROJECTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProjectsRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectsRecord>>asList(Keys.PK_PROJECTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Projects as(String alias) {
        return new Projects(alias, this);
    }

    /**
     * Rename this table
     */
    public Projects rename(String name) {
        return new Projects(name, null);
    }
}
