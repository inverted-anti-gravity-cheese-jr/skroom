/**
 * This class is generated by jOOQ
 */
package pl.pg.eti.kio.skroom.model.dba.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import pl.pg.eti.kio.skroom.model.dba.DefaultSchema;
import pl.pg.eti.kio.skroom.model.dba.Keys;
import pl.pg.eti.kio.skroom.model.dba.tables.records.UsersProjectsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersProjects extends TableImpl<UsersProjectsRecord> {

    private static final long serialVersionUID = -562546082;

    /**
     * The reference instance of <code>USERS_PROJECTS</code>
     */
    public static final UsersProjects USERS_PROJECTS = new UsersProjects();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersProjectsRecord> getRecordType() {
        return UsersProjectsRecord.class;
    }

    /**
     * The column <code>USERS_PROJECTS.ID</code>.
     */
    public final TableField<UsersProjectsRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>USERS_PROJECTS.USER_ID</code>.
     */
    public final TableField<UsersProjectsRecord, Integer> USER_ID = createField("USER_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>USERS_PROJECTS.PROJECT_ID</code>.
     */
    public final TableField<UsersProjectsRecord, Integer> PROJECT_ID = createField("PROJECT_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>USERS_PROJECTS.USER_ROLE_ID</code>.
     */
    public final TableField<UsersProjectsRecord, Integer> USER_ROLE_ID = createField("USER_ROLE_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>USERS_PROJECTS</code> table reference
     */
    public UsersProjects() {
        this("USERS_PROJECTS", null);
    }

    /**
     * Create an aliased <code>USERS_PROJECTS</code> table reference
     */
    public UsersProjects(String alias) {
        this(alias, USERS_PROJECTS);
    }

    private UsersProjects(String alias, Table<UsersProjectsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsersProjects(String alias, Table<UsersProjectsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UsersProjectsRecord> getPrimaryKey() {
        return Keys.PK_USERS_PROJECTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UsersProjectsRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersProjectsRecord>>asList(Keys.PK_USERS_PROJECTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UsersProjectsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UsersProjectsRecord, ?>>asList(Keys.FK_USERS_PROJECTS_USERS_1, Keys.FK_USERS_PROJECTS_PROJECTS_1, Keys.FK_USERS_PROJECTS_USER_ROLES_IN_PROJECT_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UsersProjects as(String alias) {
        return new UsersProjects(alias, this);
    }

    /**
     * Rename this table
     */
    public UsersProjects rename(String name) {
        return new UsersProjects(name, null);
    }
}
