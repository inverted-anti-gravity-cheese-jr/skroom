<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<configuration xmlns="http://www.jooq.org/xsd/jooq-codegen-3.8.0.xsd">
	<!-- Configure the database connection here -->
	<jdbc>
		<driver>org.sqlite.JDBC</driver>
		<url>jdbc:sqlite:data.db</url>
		<!--
		<user>root</user>
		<password></password>
		-->
	</jdbc>

	<generator>
		<!-- The default code generator. You can override this one, to generate your own code style.
			 Supported generators:
			 - org.jooq.util.JavaGenerator
			 - org.jooq.util.ScalaGenerator
			 Defaults to org.jooq.util.JavaGenerator -->
		<name>org.jooq.util.JavaGenerator</name>

		<database>
			<!-- The database type. The format here is:
				 org.util.[database].[database]Database -->
			<name>org.jooq.util.sqlite.SQLiteDatabase</name>

			<!-- The database schema (or in the absence of schema support, in your RDBMS this
				 can be the owner, user, database name) to be generated -->
			<inputSchema></inputSchema>

			<!-- All elements that are generated from your schema
				 (A Java regular expression. Use the pipe to separate several expressions)
				 Watch out for case-sensitivity. Depending on your database, this might be important! -->
			<includes>.*</includes>

			<!-- All elements that are excluded from your schema
				 (A Java regular expression. Use the pipe to separate several expressions).
				 Excludes match before includes -->
			<excludes></excludes>
		</database>

		<target>
			<!-- The destination package of your generated classes (within the destination directory) -->
			<packageName>pl.pg.eti.kio.skroom.model.dba</packageName>

			<!-- The destination directory of your generated classes. Using Maven directory layout here -->
			<directory>src/main/java</directory>
		</target>
	</generator>
</configuration>
